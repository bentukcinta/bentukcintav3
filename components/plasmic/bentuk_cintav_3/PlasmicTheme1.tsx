// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9qXrGYPf2wu9Q69JKgx7rd
// Component: a3bFpMTS7U_s

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { PlasmicHead } from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import YouTube from "@plasmicpkgs/react-youtube";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import WaButton from "../../WaButton"; // plasmic-import: -FgUGjBTnfh7/component
import Footer from "../../Footer"; // plasmic-import: SVvLR85mSlQ3/component
import Dialog from "../../Dialog"; // plasmic-import: Yv8RKyykb7qf/component
import Button from "../../Button"; // plasmic-import: 41nNSCEHS4Ht/component
import DialogImage from "../../DialogImage"; // plasmic-import: DaEuDrz1SbCf/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_5QipZgXphdXi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5QIPZgXphdXi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_bentuk_cintav_3.module.css"; // plasmic-import: 9qXrGYPf2wu9Q69JKgx7rd/projectcss
import sty from "./PlasmicTheme1.module.css"; // plasmic-import: a3bFpMTS7U_s/css

import WhatsappsvgIcon from "./icons/PlasmicIcon__Whatsappsvg"; // plasmic-import: ilHMpzw69wGo/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: epcUIRU7cW9p/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9XXkyNPveBxl/icon

createPlasmicElementProxy;

export type PlasmicTheme1__VariantMembers = {};
export type PlasmicTheme1__VariantsArgs = {};
type VariantPropType = keyof PlasmicTheme1__VariantsArgs;
export const PlasmicTheme1__VariantProps = new Array<VariantPropType>();

export type PlasmicTheme1__ArgsType = {
  slug?: string;
  tmp1To?: string;
  onTmp1ToChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTheme1__ArgsType;
export const PlasmicTheme1__ArgProps = new Array<ArgPropType>(
  "slug",
  "tmp1To",
  "onTmp1ToChange"
);

export type PlasmicTheme1__OverridesType = {
  root?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  hero?: Flex__<"section">;
  reveal?: Flex__<typeof Reveal>;
  undangan?: Flex__<"section">;
  columns?: Flex__<"div">;
  details?: Flex__<"section">;
  gallery?: Flex__<"section">;
  youTube?: Flex__<typeof YouTube>;
  location?: Flex__<"section">;
  iframe?: Flex__<typeof Iframe>;
  waButton?: Flex__<typeof WaButton>;
  svg?: Flex__<"svg">;
  footer?: Flex__<typeof Footer>;
  dialog?: Flex__<typeof Dialog>;
  h3?: Flex__<"h3">;
  dialogImage?: Flex__<typeof DialogImage>;
};

export interface DefaultTheme1Props {
  slug?: string;
  tmp1To?: string;
  onTmp1ToChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTheme1__RenderFunc(props: {
  variants: PlasmicTheme1__VariantsArgs;
  args: PlasmicTheme1__ArgsType;
  overrides: PlasmicTheme1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          slug: "agustika"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogImage.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogImage.imgUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tmp1To",
        type: "writable",
        variableType: "text",

        valueProp: "tmp1To",
        onChangeProp: "onTmp1ToChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "6tnFCKpFqPsM7FNwtC6sAz",
        opId: "6ee5e142-a461-40cf-8c02-4a3ec9bc4bd8",
        userArgs: {
          filters: [$props.slug]
        },
        cacheKey: `plasmic.$.6ee5e142-a461-40cf-8c02-4a3ec9bc4bd8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5QipZgXphdXi()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicHead
        data-plasmic-name={"pageMetadataOverride"}
        data-plasmic-override={overrides.pageMetadataOverride}
        canonical={(() => {
          try {
            return "https://bentukcinta.com/" + $queries.query.data[0].slug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.pageMetadataOverride)}
        description={"Undangan Online BentukCinta.com"}
        image={(() => {
          try {
            return $queries.query.data[0].opImage;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        title={(() => {
          try {
            return (
              "Undangan Upacara " +
              $queries.query.data[0].panggilanPria +
              " & " +
              $queries.query.data[0].panggilanWanita
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Embed
        className={classNames("__wab_instance", sty.embedHtml__vPIbm)}
        code={
          "<style>\n.lightbox {\n  /* Default to hidden */\n  display: none;\n\n  /* Overlay entire screen */\n  position: fixed;\n  z-index: 999;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  \n  /* A bit of padding around image */\n  padding: 1em;\n\n  /* Translucent background */\n  background: rgba(0, 0, 0, 0.8);\n}\n\n/* Unhide the lightbox when it's the target */\n.lightbox:target {\n  display: block;\n}\n\n.lightbox span {\n  /* Full width and height */\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  /* Size and position background image */\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n</style>"
        }
      />

      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__nkPqj)}
          displayHeight={"650px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $queries.query.data[0].bannerImage[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__siqDe)}
        >
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={true}
            className={classNames("__wab_instance", sty.reveal)}
            direction={"up"}
            triggerOnce={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eyHok
              )}
            >
              {"UNDANGAN PERNIKAHAN"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gi2TR)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__iKdJf
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $queries.query.data[0].panggilanPria +
                        " & " +
                        $queries.query.data[0].panggilanWanita
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tZzyX
              )}
            >
              {
                "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ecShW)}
            >
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__e6C9S
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return new Date(
                        $queries.query.data[0].tanggalAcara
                      ).getDate();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__pMclc
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return new Date(
                        $queries.query.data[0].tanggalAcara
                      ).toLocaleString("default", { month: "long" });
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__gJHe2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return new Date(
                        $queries.query.data[0].tanggalAcara
                      ).getFullYear();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            </Stack__>
          </Reveal>
        </Stack__>
      </section>
      <section
        data-plasmic-name={"undangan"}
        data-plasmic-override={overrides.undangan}
        className={classNames(projectcss.all, sty.undangan)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xQuOc)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__lXpK
            )}
          >
            {"Om Swastyastu"}
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__j2Hhq
            )}
          >
            {"MOHON DOA RESTU"}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__yUpth)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__lyNbV)}
                displayHeight={"160px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"160px"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $queries.query.data[0].photoPria;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__poFmx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].namaPria;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6EL8N)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iqLRf
                  )}
                >
                  {"Putra"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__msm1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const value = $queries.query.data[0].putraNomor;
                          let result;
                          if (value === "1") {
                            result = "pertama";
                          } else if (value === "2") {
                            result = "ke dua";
                          } else if (value === "3") {
                            result = "ke tiga";
                          } else if (value === "4") {
                            result = "ke empat";
                          } else if (value === "5") {
                            result = "ke lima";
                          }
                          return result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Putra ke";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ash4S
                  )}
                >
                  {"dari Pasangan"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__af8Fu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].orangtuaPria;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aU0Uy
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].alamatPria;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__mtyQw)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__qwWpO)}
                displayHeight={"160px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"160px"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $queries.query.data[0].PhotoWanita;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aGhZ
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].namaWanita;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aBiub)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qfXov
                  )}
                >
                  {"Putri"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hx7Kn
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const value = $queries.query.data[0].putriNomor;
                          let result;
                          if (value === "1") {
                            result = "pertama";
                          } else if (value === "2") {
                            result = "ke dua";
                          } else if (value === "3") {
                            result = "ke tiga";
                          } else if (value === "4") {
                            result = "ke empat";
                          } else if (value === "5") {
                            result = "ke lima";
                          }
                          return result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Putra ke";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__omOe
                  )}
                >
                  {"dari Pasangan"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xkwL2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].orangtuaWanita;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hVRpH
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].alamatWanita;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
      </section>
      <section
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__t5Bni)}>
          {(() => {
            try {
              return $queries.query.data[0].altBanner !== null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__iW9Qe)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.query.data[0].altBanner;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/bentuk_cintav_3/images/floralBgMinpng.png",
                      fullWidth: 1315,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          {(() => {
            try {
              return $queries.query.data[0].altBanner === null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__bQpum)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/bentuk_cintav_3/images/floralBgMinpng.png",
                fullWidth: 1315,
                fullHeight: 1024,
                aspectRatio: undefined
              }}
            />
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qcURt
            )}
          >
            {
              "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
            }
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ch5Yg)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bAosv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3LlP6
                )}
              >
                {"\ud83d\uddd3\ufe0f"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bi4Ke
                )}
              >
                {"Tanggal"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bBr6O)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4EQge
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const date = new Date(
                            $queries.query.data[0].tanggalAcara
                          );
                          const options = { weekday: "long", locale: "id-ID" };
                          const day = new Intl.DateTimeFormat(
                            "id-ID",
                            options
                          ).format(date);
                          return day;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Tanggal :";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__remvk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return new Date(
                          $queries.query.data[0].tanggalAcara
                        ).getDate();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tUDh
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return new Date(
                          $queries.query.data[0].tanggalAcara
                        ).toLocaleString("default", { month: "long" });
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0TXve
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return new Date(
                          $queries.query.data[0].tanggalAcara
                        ).getFullYear();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___81Od)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bu2Db
                )}
              >
                {"\u23f0"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__icvo2
                )}
              >
                {"Jam "}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rphrk
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].jamAcara + " Sd. Selesai";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Tanggal :";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__qwJeR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mVjCf
                )}
              >
                {"\ud83c\udfe0"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fcycH
                )}
              >
                {"Lokasi"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qvqJh
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].lokasiAcara;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Tanggal :";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </Stack__>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__ceX6R
            )}
          >
            {"Om Shanti Shanti Shanti Om"}
          </h1>
        </div>
      </section>
      <section
        data-plasmic-name={"gallery"}
        data-plasmic-override={overrides.gallery}
        className={classNames(projectcss.all, sty.gallery)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___28Asc)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1___7Xqy
            )}
          >
            {"Gallery"}
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vbXky
            )}
          >
            {
              '"Ya Tuhanku yang Maha Pengasih, anugerahkanlah kepada pasangan pengantin ini senantiasa berbahagia keduanya tiada terpisahkan, panjang umur, semoga pengantin ini dianugerahkan putra dan cucu yang memberikan penghiburan, tinggal dirumah yang penuh kebahagiaan.\u201d\n\nRG VEDA X.85.42'
            }
          </div>
          {(() => {
            try {
              return $queries.query.data.length === null
                ? false
                : $queries.query.data[0].linkYoutube;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={(() => {
                try {
                  return $queries.query.data[0].linkYoutube;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "R6MeLqRQzYw";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__aeoZg)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.query.data[0].fotoGallery;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__dEoJq
                  )}
                  component={Link}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogImageOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialogImage", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogImageOpen"] != null &&
                      typeof $steps["updateDialogImageOpen"] === "object" &&
                      typeof $steps["updateDialogImageOpen"].then === "function"
                    ) {
                      $steps["updateDialogImageOpen"] = await $steps[
                        "updateDialogImageOpen"
                      ];
                    }

                    $steps["updateDialogImageImgUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialogImage", "imgUrl"]
                            },
                            operation: 0,
                            value: currentItem
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogImageImgUrl"] != null &&
                      typeof $steps["updateDialogImageImgUrl"] === "object" &&
                      typeof $steps["updateDialogImageImgUrl"].then ===
                        "function"
                    ) {
                      $steps["updateDialogImageImgUrl"] = await $steps[
                        "updateDialogImageImgUrl"
                      ];
                    }
                  }}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zNMl)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </PlasmicLink__>
              );
            })}
          </div>
        </Stack__>
        <Embed
          className={classNames("__wab_instance", sty.embedHtml__dJe41)}
          code={(() => {
            try {
              return (
                "<audio controls autoplay><source src='" +
                $queries.query.data[0].audio +
                "' type='audio/mpeg'></audio>"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </section>
      <section
        data-plasmic-name={"location"}
        data-plasmic-override={overrides.location}
        className={classNames(projectcss.all, sty.location)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nFVkd)}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__bWPwL
            )}
          >
            {"Lokasi Upacara"}
          </h1>
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            preview={true}
            src={(() => {
              try {
                return $queries.query.data[0].linkGmap.gmaps;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return ``;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__hCszk)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wijYe
              )}
              component={Link}
              href={(() => {
                try {
                  return (
                    "https://www.google.com/maps/place/" +
                    $queries.query.data[0].linkGmap.latitude +
                    "," +
                    $queries.query.data[0].linkGmap.longitude
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://www.plasmic.app/";
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              {"Petunjuk Arah"}
            </PlasmicLink__>
          </div>
        </Stack__>
      </section>
      <WaButton
        data-plasmic-name={"waButton"}
        data-plasmic-override={overrides.waButton}
        className={classNames("__wab_instance", sty.waButton)}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link___28LVs)}
          component={Link}
          href={(() => {
            try {
              return (
                "https://api.whatsapp.com/send?phone=" +
                $queries.query.data[0].noWA +
                "%20&text=Hi,%20ini%20pesan%20dari%20undangan%20online%20mu."
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          platform={"nextjs"}
        >
          <WhatsappsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </PlasmicLink__>
      </WaButton>
      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />

      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jJs1B)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__s1PNl
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $queries.query.data[0].panggilanPria +
                      " & " +
                      $queries.query.data[0].panggilanWanita
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "You can insert dialog body content here in this slot.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vyHom
              )}
            >
              {"Kpd Bpk/Ibu/Saudara/i"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__edivQ)}>
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.tmp1To;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Kpd Bpk/Ibu/Saudara/i";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h3>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ax4Qr
              )}
            >
              {
                "Tanpa Mengurangi Rasa Hormat, Kami Mengundang Anda Untuk Hadir di Acara Resepsi Pernikahan Kami."
              }
            </div>
          </Stack__>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wgSm8
            )}
          >
            {"Bentukcinta.com"}
          </div>
        }
      />

      <DialogImage
        data-plasmic-name={"dialogImage"}
        data-plasmic-override={overrides.dialogImage}
        className={classNames("__wab_instance", sty.dialogImage)}
        imgUrl={generateStateValueProp($state, ["dialogImage", "imgUrl"])}
        noTrigger={true}
        onImgUrlChange={generateStateOnChangeProp($state, [
          "dialogImage",
          "imgUrl"
        ])}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialogImage", "open"]).apply(
            null,
            eventArgs
          );
          (async val => {
            const $steps = {};

            $steps["updateVariant"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateVariant"] != null &&
              typeof $steps["updateVariant"] === "object" &&
              typeof $steps["updateVariant"].then === "function"
            ) {
              $steps["updateVariant"] = await $steps["updateVariant"];
            }
          }).apply(null, eventArgs);
        }}
        open={generateStateValueProp($state, ["dialogImage", "open"])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "hero",
    "reveal",
    "undangan",
    "columns",
    "details",
    "gallery",
    "youTube",
    "location",
    "iframe",
    "waButton",
    "svg",
    "footer",
    "dialog",
    "h3",
    "dialogImage"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  hero: ["hero", "reveal"],
  reveal: ["reveal"],
  undangan: ["undangan", "columns"],
  columns: ["columns"],
  details: ["details"],
  gallery: ["gallery", "youTube"],
  youTube: ["youTube"],
  location: ["location", "iframe"],
  iframe: ["iframe"],
  waButton: ["waButton", "svg"],
  svg: ["svg"],
  footer: ["footer"],
  dialog: ["dialog", "h3"],
  h3: ["h3"],
  dialogImage: ["dialogImage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageMetadataOverride: typeof PlasmicHead;
  hero: "section";
  reveal: typeof Reveal;
  undangan: "section";
  columns: "div";
  details: "section";
  gallery: "section";
  youTube: typeof YouTube;
  location: "section";
  iframe: typeof Iframe;
  waButton: typeof WaButton;
  svg: "svg";
  footer: typeof Footer;
  dialog: typeof Dialog;
  h3: "h3";
  dialogImage: typeof DialogImage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTheme1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTheme1__VariantsArgs;
    args?: PlasmicTheme1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTheme1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTheme1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTheme1__ArgProps,
          internalVariantPropNames: PlasmicTheme1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTheme1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTheme1";
  } else {
    func.displayName = `PlasmicTheme1.${nodeName}`;
  }
  return func;
}

export const PlasmicTheme1 = Object.assign(
  // Top-level PlasmicTheme1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    hero: makeNodeComponent("hero"),
    reveal: makeNodeComponent("reveal"),
    undangan: makeNodeComponent("undangan"),
    columns: makeNodeComponent("columns"),
    details: makeNodeComponent("details"),
    gallery: makeNodeComponent("gallery"),
    youTube: makeNodeComponent("youTube"),
    location: makeNodeComponent("location"),
    iframe: makeNodeComponent("iframe"),
    waButton: makeNodeComponent("waButton"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),
    dialog: makeNodeComponent("dialog"),
    h3: makeNodeComponent("h3"),
    dialogImage: makeNodeComponent("dialogImage"),

    // Metadata about props expected for PlasmicTheme1
    internalVariantProps: PlasmicTheme1__VariantProps,
    internalArgProps: PlasmicTheme1__ArgProps
  }
);

export default PlasmicTheme1;
/* prettier-ignore-end */
