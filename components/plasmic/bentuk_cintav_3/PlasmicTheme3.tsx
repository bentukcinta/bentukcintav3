// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9qXrGYPf2wu9Q69JKgx7rd
// Component: L6EX7BNfvU2R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { PlasmicHead } from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import WaButton from "../../WaButton"; // plasmic-import: -FgUGjBTnfh7/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_bentuk_cintav_3.module.css"; // plasmic-import: 9qXrGYPf2wu9Q69JKgx7rd/projectcss
import sty from "./PlasmicTheme3.module.css"; // plasmic-import: L6EX7BNfvU2R/css

import WhatsappsvgIcon from "./icons/PlasmicIcon__Whatsappsvg"; // plasmic-import: ilHMpzw69wGo/icon

createPlasmicElementProxy;

export type PlasmicTheme3__VariantMembers = {};
export type PlasmicTheme3__VariantsArgs = {};
type VariantPropType = keyof PlasmicTheme3__VariantsArgs;
export const PlasmicTheme3__VariantProps = new Array<VariantPropType>();

export type PlasmicTheme3__ArgsType = {
  slug?: string;
  tmp1To?: string;
  onTmp1ToChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTheme3__ArgsType;
export const PlasmicTheme3__ArgProps = new Array<ArgPropType>(
  "slug",
  "tmp1To",
  "onTmp1ToChange"
);

export type PlasmicTheme3__OverridesType = {
  root?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  embedHtml?: Flex__<typeof Embed>;
  hero?: Flex__<"section">;
  waButton?: Flex__<typeof WaButton>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
};

export interface DefaultTheme3Props {
  slug?: string;
  tmp1To?: string;
  onTmp1ToChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTheme3__RenderFunc(props: {
  variants: PlasmicTheme3__VariantsArgs;
  args: PlasmicTheme3__ArgsType;
  overrides: PlasmicTheme3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          slug: "agustika"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tmp1To",
        type: "writable",
        variableType: "text",

        valueProp: "tmp1To",
        onChangeProp: "onTmp1ToChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "6tnFCKpFqPsM7FNwtC6sAz",
        opId: "6ee5e142-a461-40cf-8c02-4a3ec9bc4bd8",
        userArgs: {
          filters: [$props.slug]
        },
        cacheKey: `plasmic.$.6ee5e142-a461-40cf-8c02-4a3ec9bc4bd8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicHead
        data-plasmic-name={"pageMetadataOverride"}
        data-plasmic-override={overrides.pageMetadataOverride}
        canonical={(() => {
          try {
            return "https://bentukcinta.com/" + $queries.query.data[0].slug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.pageMetadataOverride)}
        description={"Undangan Online BentukCinta.com"}
        image={(() => {
          try {
            return $queries.query.data[0].opImage;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        title={(() => {
          try {
            return (
              "Undangan Upacara " +
              $queries.query.data[0].panggilanPria +
              " & " +
              $queries.query.data[0].panggilanWanita
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          "<style>\n.lightbox {\n  /* Default to hidden */\n  display: none;\n\n  /* Overlay entire screen */\n  position: fixed;\n  z-index: 999;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  \n  /* A bit of padding around image */\n  padding: 1em;\n\n  /* Translucent background */\n  background: rgba(0, 0, 0, 0.8);\n}\n\n/* Unhide the lightbox when it's the target */\n.lightbox:target {\n  display: block;\n}\n\n.lightbox span {\n  /* Full width and height */\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  /* Size and position background image */\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n</style>"
        }
      />

      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__dpGb)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"800px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/bentuk_cintav_3/images/invitation1Png.png",
            fullWidth: 800,
            fullHeight: 1135,
            aspectRatio: undefined
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__p2UzQ)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"800px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/bentuk_cintav_3/images/invitation2Png.png",
            fullWidth: 800,
            fullHeight: 1135,
            aspectRatio: undefined
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__vr5TM)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"800px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/bentuk_cintav_3/images/invitation3Png.png",
            fullWidth: 800,
            fullHeight: 1135,
            aspectRatio: undefined
          }}
        />
      </section>
      <WaButton
        data-plasmic-name={"waButton"}
        data-plasmic-override={overrides.waButton}
        className={classNames("__wab_instance", sty.waButton)}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={(() => {
            try {
              return (
                "https://api.whatsapp.com/send?phone=" +
                $queries.query.data[0].noWA +
                "%20&text=Hi,%20ini%20pesan%20dari%20undangan%20online%20mu."
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          platform={"nextjs"}
        >
          <WhatsappsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </PlasmicLink__>
      </WaButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "embedHtml",
    "hero",
    "waButton",
    "link",
    "svg"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  embedHtml: ["embedHtml"],
  hero: ["hero"],
  waButton: ["waButton", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageMetadataOverride: typeof PlasmicHead;
  embedHtml: typeof Embed;
  hero: "section";
  waButton: typeof WaButton;
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTheme3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTheme3__VariantsArgs;
    args?: PlasmicTheme3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTheme3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTheme3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTheme3__ArgProps,
          internalVariantPropNames: PlasmicTheme3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTheme3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTheme3";
  } else {
    func.displayName = `PlasmicTheme3.${nodeName}`;
  }
  return func;
}

export const PlasmicTheme3 = Object.assign(
  // Top-level PlasmicTheme3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    embedHtml: makeNodeComponent("embedHtml"),
    hero: makeNodeComponent("hero"),
    waButton: makeNodeComponent("waButton"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicTheme3
    internalVariantProps: PlasmicTheme3__VariantProps,
    internalArgProps: PlasmicTheme3__ArgProps
  }
);

export default PlasmicTheme3;
/* prettier-ignore-end */
