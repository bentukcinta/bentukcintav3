// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9qXrGYPf2wu9Q69JKgx7rd
// Component: CVWf3ibwWWKS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import { useScreenVariants as useScreenVariants_5QipZgXphdXi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5QIPZgXphdXi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_bentuk_cintav_3.module.css"; // plasmic-import: 9qXrGYPf2wu9Q69JKgx7rd/projectcss
import sty from "./PlasmicTheme2.module.css"; // plasmic-import: CVWf3ibwWWKS/css

createPlasmicElementProxy;

export type PlasmicTheme2__VariantMembers = {};
export type PlasmicTheme2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTheme2__VariantsArgs;
export const PlasmicTheme2__VariantProps = new Array<VariantPropType>();

export type PlasmicTheme2__ArgsType = {
  undangan?: any;
};
type ArgPropType = keyof PlasmicTheme2__ArgsType;
export const PlasmicTheme2__ArgProps = new Array<ArgPropType>("undangan");

export type PlasmicTheme2__OverridesType = {
  root?: Flex__<"div">;
  hero?: Flex__<"section">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  hero2?: Flex__<"section">;
};

export interface DefaultTheme2Props {
  undangan?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTheme2__RenderFunc(props: {
  variants: PlasmicTheme2__VariantsArgs;
  args: PlasmicTheme2__ArgsType;
  overrides: PlasmicTheme2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5QipZgXphdXi()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__eFj9)}>
          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: true,
              autoplaySpeed: hasVariant(globalVariants, "screen", "mobileOnly")
                ? 2000
                : 2000,
              beforeChange: generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel", "currentSlide"],
                SliderWrapper_Helpers
              ),
              className: classNames("__wab_instance", sty.sliderCarousel),
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              pauseOnHover: hasVariant(globalVariants, "screen", "mobileOnly")
                ? false
                : undefined,
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"]
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $props.undangan.bannerImage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pSwGh)}
                      key={currentIndex}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___8XvJm)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"714px"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://static1.plasmic.app/components/react-slick/slide1.png";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  );
                })}
              </SliderWrapper>
            );
          })()}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___9Ps0C)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__f6WVk
              )}
            >
              {"Undangan Pawiwahan"}
            </h3>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__rkcFk
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $props.undangan.panggilanPria +
                      " & " +
                      $props.undangan.panggilanWanita
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h1>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6___8Mib
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const date = new Date($props.undangan.tanggalAcara);
                      const day = date.getDate();
                      const month = date.toLocaleString("default", {
                        month: "long"
                      });
                      const year = date.getFullYear();
                      return `${day} ● ${month} ● ${year}`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Undangan Pawiwahan";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h6>
          </Stack__>
        </div>
      </section>
      <section
        data-plasmic-name={"hero2"}
        data-plasmic-override={overrides.hero2}
        className={classNames(projectcss.all, sty.hero2)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__dw1Uf)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__zkRnw)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fXvhg)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__dDvy
              )}
            >
              {"Undangan Pawiwahan"}
            </h3>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__mhP9J
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $props.undangan.panggilanPria +
                      " & " +
                      $props.undangan.panggilanWanita
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h1>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__eho3V
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const date = new Date($props.undangan.tanggalAcara);
                      const day = date.getDate();
                      const month = date.toLocaleString("default", {
                        month: "long"
                      });
                      const year = date.getFullYear();
                      return `${day} ● ${month} ● ${year}`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Undangan Pawiwahan";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h6>
          </Stack__>
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "hero", "sliderCarousel", "hero2"],
  hero: ["hero", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  hero2: ["hero2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "section";
  sliderCarousel: typeof SliderWrapper;
  hero2: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTheme2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTheme2__VariantsArgs;
    args?: PlasmicTheme2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTheme2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTheme2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTheme2__ArgProps,
          internalVariantPropNames: PlasmicTheme2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTheme2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTheme2";
  } else {
    func.displayName = `PlasmicTheme2.${nodeName}`;
  }
  return func;
}

export const PlasmicTheme2 = Object.assign(
  // Top-level PlasmicTheme2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    hero2: makeNodeComponent("hero2"),

    // Metadata about props expected for PlasmicTheme2
    internalVariantProps: PlasmicTheme2__VariantProps,
    internalArgProps: PlasmicTheme2__ArgProps
  }
);

export default PlasmicTheme2;
/* prettier-ignore-end */
